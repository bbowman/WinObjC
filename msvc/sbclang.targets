<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <ItemGroup>
    <PropertyPageSchema
      Include="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).xml" />
    <PropertyPageSchema
      Include="$(MSBuildThisFileDirectory)Islandwood.xml" />
    <AvailableItemName
      Include="ClangCompile">
      <Targets>_ClangCompile</Targets>
    </AvailableItemName>
  </ItemGroup>

  <UsingTask
    TaskName="Clang"
    AssemblyFile="ClangCompileTask.dll"/>

  <Import Project="$(MSBuildThisFileDirectory)filterprojects.tasks" />

  <PropertyGroup>
    <ClangCompileDependsOn>_SelectedFiles;MakeDirsForClang;GenerateHeaderMaps;ComputeClangOptions</ClangCompileDependsOn>
    <ClangCompileBeforeTargets>ClCompile;Link;Lib;ImpLib</ClangCompileBeforeTargets>
    <ClangCompileAfterTargets></ClangCompileAfterTargets>
    <BeforeClCompileTargets>_ClangCompile;AddObjCTwoStageInitFile;$(BeforeClCompileTargets)</BeforeClCompileTargets>
    <BuildCompileTargets>_ClangCompile;$(BuildCompileTargets)</BuildCompileTargets>
  </PropertyGroup>

  <PropertyGroup>
    <ClangCompileExtraInputs>$(MSBuildProjectFile)</ClangCompileExtraInputs>
    <CombinedHMapFilename>$([System.IO.Path]::Combine('$(ProjectDir)', '$(IntDir)', '$(MSBuildProjectName)-combined'))</CombinedHMapFilename>
    <ProjectHMapFilename>$([System.IO.Path]::Combine('$(ProjectDir)', '$(IntDir)', '$(MSBuildProjectName)-project'))</ProjectHMapFilename>
    <CombinedHMapRequired>@(ClangCompile->AnyHaveMetadataValue('HeaderMap','Combined'))</CombinedHMapRequired>
    <ProjectHMapRequired>@(ClangCompile->AnyHaveMetadataValue('HeaderMap','Project'))</ProjectHMapRequired>
    <HMapAddFrameworkEntries>@(ClangCompile->AnyHaveMetadataValue('HeaderMapAddFrameworkEntries','true'))</HMapAddFrameworkEntries>
    <DummyClangFile>$(IntDir)DummyNoCompile.mm</DummyClangFile>
  </PropertyGroup>

  <PropertyGroup>
    <DepWalkerPathFile>$(IntDir)$(ProjectName).dwp</DepWalkerPathFile>
    <DepWalkerOutputFile>$(IntDir)$(ProjectName).dwo</DepWalkerOutputFile>
    <DepWalkerCommand>"$(MSBuildThisFileDirectory)..\bin\depends.exe" /c /f:1 /d:"$(DepWalkerPathFile)" /oc:"$(DepWalkerOutputFile)" "$(TargetPath)"</DepWalkerCommand>
    <LibPathPattern>^,"([^"]*.\DLL)"</LibPathPattern>
  </PropertyGroup>
  
  <PropertyGroup>
    <WritePublicHeaderList>false</WritePublicHeaderList>
    <Objc2WinmdExe>$(MSBuildThisFileDirectory)..\bin\objc2winmd.exe</Objc2WinmdExe>
    <SolutionPublicHeadersDir>$(SolutionDir)$(Configuration)\Headers</SolutionPublicHeadersDir>
    <PublicHeadersDir>$(SolutionPublicHeadersDir)\$(TargetName)</PublicHeadersDir>
    <PublicHeaderListFileSuffix>.headers</PublicHeaderListFileSuffix>
    <PublicHeaderArgsFileSuffix>.args</PublicHeaderArgsFileSuffix>
    <PublicHeaderListFile>$(PublicHeadersDir)\$(TargetName)$(PublicHeaderListFileSuffix)</PublicHeaderListFile>
    <PublicHeaderArgsFile>$(PublicHeadersDir)\$(TargetName)$(PublicHeaderArgsFileSuffix)</PublicHeaderArgsFile>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)\middleware.targets" />

  <Target
    Name="FindPublicHeaders"
    Condition="'$(ConfigurationType)' == 'StaticLibrary' or '$(ConfigurationType)' == 'DynamicLibrary'" >
    
    <ItemGroup>
      <PublicHeader
        Include="$(PublicHeadersDir)\%(ClInclude.Filename)%(ClInclude.Extension)"
        Condition="'%(ClInclude.PublicHeader)' == 'true'">
        <Source>%(ClInclude.FullPath)</Source>
      </PublicHeader>
    </ItemGroup>
    
    <PropertyGroup>
      <WritePublicHeaderList Condition="'$(ExportPublicHeaders)' == 'true' and '@(PublicHeader)' != ''">true</WritePublicHeaderList>
    </PropertyGroup>
    
  </Target>

  <!-- Copy project's public headers before build starts -->
  <PropertyGroup>
    <BeforeBuildCompileTargets>CopyPublicHeaders;$(BeforeBuildCompileTargets)</BeforeBuildCompileTargets>
  </PropertyGroup>

  <!-- FindPublicHeaders must run before _CopyPublicHeaders's condition is evaluated -->
  <Target Name="CopyPublicHeaders" DependsOnTargets="FindPublicHeaders;_CopyPublicHeaders" />
  
  <Target
    Name="_CopyPublicHeaders"
    Condition="'@(PublicHeader)' != ''"
    Inputs="@(PublicHeader->'%(Source)')"
    Outputs="@(PublicHeader)">
    
    <MakeDir Directories="@(PublicHeader->DirectoryName()->Distinct()->ClearMetadata())" />
    
    <Copy
      SourceFiles="@(PublicHeader->'%(Source)')"
      DestinationFiles="@(PublicHeader)" />

    <WriteLinesToFile
      File="$(TLogLocation)$(ProjectName).read.headers.tlog"
      Lines="^$(ProjectPath);@(PublicHeader->'%(Source)')"
      Overwrite="true"
      Encoding="Unicode" />

    <WriteLinesToFile
      File="$(TLogLocation)$(ProjectName).write.headers.tlog"
      Lines="^$(ProjectPath);@(PublicHeader)"
      Overwrite="true"
      Encoding="Unicode" />
    
  </Target>
  
  <Target
    Name="WritePublicHeaderList"
    Condition="'$(WritePublicHeaderList)' == 'true'"
    DependsOnTargets="CopyPublicHeaders"
    AfterTargets="Link;Lib"
    Inputs="@(PublicHeader);$(ProjectPath)"
    Outputs="$(PublicHeaderListFile);$(PublicHeaderArgsFile)">
    
    <!-- Get project-wide Clang arguments -->
    <Clang
      InternalSystemIncludePaths="%(ClangCompile.InternalSystemIncludePaths)"
      InternalIncludePaths="%(ClangCompile.InternalIncludePaths)"
      InternalForceIncludes="%(ClangCompile.InternalForceIncludes)"
      ExcludedSearchPathSubdirectories="%(ClangCompile.ExcludedSearchPathSubdirectories)"
      Autocomplete="true"
      AutocompleteCommandLineTemplate="%(ClangCompile.AutocompleteCommandLineTemplate)"
      CommandLineTemplate="%(ClangCompile.CommandLineTemplate)"
      CommandTLogFile="%(ClangCompile.CommandTLogFile)"
      CompileAs="CompileAsObjCpp"
      DebugInformation="%(ClangCompile.DebugInformation)"
      DependencyFile="%(ClangCompile.DependencyFile)"
      ExceptionHandling="%(ClangCompile.ExceptionHandling)"
      HeaderMapInclude=""
      IncludePaths="$(SolutionPublicHeadersDir);%(ClangCompile.IncludePaths)"
      Input="@(ClangCompile->WithMetadataValue('Identity', '$(DummyClangFile)'))"
      LLVMDirectory="$(StarboardLLVMDirectory)"
      ObjectiveCARC="%(ClangCompile.ObjectiveCARC)"
      ObjectiveCModules="false"
      ObjectiveCModulesCachePath="%(ClangCompile.ObjectiveCModulesCachePath)"
      ObjectFileName="%(ClangCompile.ObjectFileName)"
      OptimizationLevel="%(ClangCompile.OptimizationLevel)"
      PrefixHeader="%(ClangCompile.PrefixHeader)"
      PreprocessorDefinitions="%(ClangCompile.PreprocessorDefinitions)"
      ProjectFile="$(MSBuildProjectFullPath)"
      RuntimeLibrary="%(ClangCompile.RuntimeLibrary)"
      SystemHeaderDeps="%(ClangCompile.SystemHeaderDeps)"
      UserIncludePaths="%(ClangCompile.UserIncludePaths)"
      ReadTLogFile="%(ClangCompile.ReadTLogFile)"
      MaxClangProcesses="%(ClangCompile.MaxClangProcesses)"
      AdditionalOptions="%(ClangCompile.OtherFlags) %(ClangCompile.AdditionalOptions)">
      <Output TaskParameter="Outputs" ItemName="DummyClangOutput" />
    </Clang>

    <WriteLinesToFile
      File="$(PublicHeaderListFile)"
      Lines="@(PublicHeader)"
      Overwrite="true"
      Encoding="ASCII" />

    <WriteLinesToFile
      File="$(PublicHeaderArgsFile)"
      Lines="@(DummyClangOutput->Metadata('AutocompleteCommand'))"
      Overwrite="true"
      Encoding="ASCII" />

    <WriteLinesToFile
      File="$(TLogLocation)$(ProjectName).read.headerlist.tlog"
      Lines="^$(ProjectPath);@(PublicHeader)"
      Overwrite="true"
      Encoding="Unicode" />

    <WriteLinesToFile
      File="$(TLogLocation)$(ProjectName).write.headerlist.tlog"
      Lines="^$(ProjectPath);$(PublicHeaderListFile);$(PublicHeaderArgsFile)"
      Overwrite="true"
      Encoding="Unicode" />

  </Target>
  
  <Target
    Name="_ComputeObjc2WinmdInputs"
    DependsOnTargets="FindPublicHeaders"
    Returns="@(Objc2WinmdHeaderListFile)" >
    
    <ItemGroup Condition="'$(WritePublicHeaderList)' == 'true'">
      <Objc2WinmdHeaderListFile Include="$(PublicHeaderListFile)">
        <ArgsFile>$(PublicHeaderArgsFile)</ArgsFile>
      </Objc2WinmdHeaderListFile>
    </ItemGroup>
    
  </Target>

  <Target
    Name="ComputeObjc2WinmdInputs"
    Condition="'$(IslandwoodConfigurationType)' == 'Projection'">

    <MSBuild
      Projects="@(_MSBuildProjectReferenceExistent)"
      Targets="_ComputeObjc2WinmdInputs"
      BuildInParallel="$(BuildInParallel)"
      Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
      Condition="'%(_MSBuildProjectReferenceExistent.Extension)' == '.vcxproj' and '@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != ''"
      ContinueOnError="!$(BuildingProject)"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">
      <Output TaskParameter="TargetOutputs" ItemName="Objc2WinmdHeaderListFile"/>
    </MSBuild>

    <ItemGroup>
      <Objc2WinmdInput Include="@(Objc2WinmdHeaderListFile);@(Objc2WinmdHeaderListFile->'%(ArgsFile)')" />
    </ItemGroup>

  </Target>
  
  <PropertyGroup>
    <ResolveAssemblyReferencesDependsOn>SetFirstTimeLoading;$(ResolveAssemblyReferencesDependsOn);</ResolveAssemblyReferencesDependsOn>
    <BeforeMidlCompileTargets>ComputeObjc2WinmdInputs;InvokeObjc2Winmd;ProcessObjc2WinmdGeneratedFiles;$(BeforeMidlTargets);</BeforeMidlCompileTargets>
    <Objc2WinmdDummyOutput>$(Objc2WinmdGeneratedFilesDir)\InvokeObjc2Winmd.dummy</Objc2WinmdDummyOutput>
  </PropertyGroup>
  
  <Target Name="SetFirstTimeLoading">
    <PropertyGroup>
      <FirstTimeLoading Condition=" '$(FirstTimeLoading)' == '' ">false</FirstTimeLoading>
    </PropertyGroup>
  </Target>
  
  <Target
    Name="InvokeObjc2Winmd"
    Condition="'$(FirstTimeLoading)' == 'false' And '$(IslandwoodConfigurationType)' == 'Projection' And '@(Objc2WinmdInput)' != ''"
    Inputs="@(Objc2WinmdInput)"
    Outputs="$(Objc2WinmdDummyOutput)">
    
    <MakeDir Directories="$(Objc2WinmdGeneratedFilesDir)" />
    
    <!-- Call objc2winmd -->
    <Exec
      Condition="'@(Objc2WinmdHeaderListFile)' != ''"
      Command="&quot;$(Objc2WinmdExe)&quot; -r &quot;$(TargetName)&quot; -o &quot;$(Objc2WinmdGeneratedFilesDir)&quot; @(Objc2WinmdInput->'&quot;%(FullPath)&quot;', ' ')" />
    
    <!-- Use a dummy file for tracking when files were generated -->
    <Touch
      Files="$(Objc2WinmdDummyOutput)"
      AlwaysCreate="true" />

    <WriteLinesToFile
      File="$(TLogLocation)$(ProjectName).read.objc2winmd.tlog"
      Lines="^$(ProjectPath);@(Objc2WinmdInput)"
      Overwrite="true"
      Encoding="Unicode" />

    <WriteLinesToFile
      File="$(TLogLocation)$(ProjectName).write.objc2winmd.tlog"
      Lines="^$(ProjectPath);$(Objc2WinmdDummyOutput)"
      Overwrite="true"
      Encoding="Unicode" />

    <!-- Touch the project file so VS asks the user to reload it -->
    <Touch Files="$(MSBuildProjectDirectory)\$(MSBuildProjectFile)" />

  </Target>

  <Target
    Name="ProcessObjc2WinmdGeneratedFiles"
    Condition="'$(IslandwoodConfigurationType)' == 'Projection' And Exists('$(Objc2WinmdGeneratedFilesDir)')">

    <!-- Add the files generated by objc2winmd to the project so they can be compiled.
         Try to avoid adding files that already exist in the project.
    -->
    <ItemGroup>
      <ClangCompile Include="$(Objc2WinmdGeneratedFilesDir)\*.mm" Exclude="@(ClangCompile->'%(FullPath)')" />
      <Midl Include="$(Objc2WinmdGeneratedFilesDir)\*.idl" Exclude="@(Midl->'%(FullPath)')" />
    </ItemGroup>

  </Target>

  <Target
    Name="CleanObjc2WinmdGeneratedFiles"
    Condition="'$(IslandwoodConfigurationType)' == 'Projection' And Exists('$(Objc2WinmdGeneratedFilesDir)')">

    <!-- Clean the files generated by objc2winmd from the project. -->
    <ItemGroup>
      <Objc2WinmdGeneratedFiles Include="$(Objc2WinmdGeneratedFilesDir)\*.mm" />
      <Objc2WinmdGeneratedFiles Include="$(Objc2WinmdGeneratedFilesDir)\*.idl" />
      <Objc2WinmdGeneratedFiles Include="$(Objc2WinmdGeneratedFilesDir)\*.h" />
      <!-- Include dlldata.c file that was generated by MIDL -->
      <Objc2WinmdGeneratedFiles Include="$(Objc2WinmdGeneratedFilesDir)\dlldata.c" />
    </ItemGroup>

    <Delete Files="@(Objc2WinmdGeneratedFiles)" />

    <ItemGroup>
      <Objc2WinmdGeneratedFiles Remove="@(Objc2WinmdGeneratedFiles)" />
    </ItemGroup>

  </Target>

  <Target
    Name="MergeWinmd"
    Condition="'$(IslandwoodConfigurationType)' == 'Projection' And '@(Midl)' != ''"
    Inputs="@(Midl->Metadata('MetadataFileName'))"
    Outputs="$(OutputPath)\$(TargetName).winmd"
    AfterTargets="Link">

    <!-- Find the directory for the intermediate WinMD files -->
    <ItemGroup>
      <MergeWinmdInputDir Include="@(Midl->Metadata('MetadataFileName')->DirectoryName()->Distinct())" />
    </ItemGroup>

    <Error
      Condition="'@(MergeWinmdInputDir->Count())' != '1'"
      Text="All WinMD files generated by Midl should be in the same directory." />

    <!-- Call mdmerge -->
    <!-- $TargetPlatformWinMDLocation or windowsSDK_MetadataPath -->
    <Exec
      Condition="'@(Midl->'%(MetadataFileName)')' != ''"
      Command="mdmerge.exe -i &quot;@(MergeWinmdInputDir)&quot; -o &quot;$(OutputPath.TrimEnd('\'))&quot; -n:1 -partial -metadata_dir &quot;$(TargetPlatformWinMDLocation)\Windows.Foundation.FoundationContract\1.0.0.0&quot; -metadata_dir &quot;$(TargetPlatformWinMDLocation)\Windows.Foundation.UniversalApiContract\1.0.0.0&quot;" />

  </Target>
  
  <Target
    Name="HandleExplicitLibs"
    Condition="'$(CopyStarboardLibraries)' == 'true'"
    BeforeTargets="SBResourcePackage"
    AfterTargets="Link">

    <ItemGroup>
      <!-- The AppInsights files are required by the Logging lib -->
      <SBResourceCopy Include="$(StarboardLibDirs)\ApplicationInsights.winmd" />
      <SBResourceCopy Include="$(StarboardLibDirs)\ApplicationInsights.dll" />
      <SBResourceCopy Include="$(StarboardLibDirs)\AppInsights_Win10-UAP.dll" />
    </ItemGroup>

    <!-- UIKit.Xaml -->
    <ItemGroup>
      <UIKitXamlFile Include="$(StarboardLibDirs)\UIKit.Xaml\**\*.xaml" />
      <SBResourceCopy Include="%(UIKitXamlFile.Identity)">
        <VariantDir>UIKit.Xaml\%(UIKitXamlFile.RecursiveDir)</VariantDir>
      </SBResourceCopy>
    </ItemGroup>

    <ItemGroup>
      <!-- CoreFoundation resource files -->
      <SBResourceCopy Include="$(StarboardLibDirs)\CFCharacterSetBitmaps.bitmap" />
      <SBResourceCopy Include="$(StarboardLibDirs)\CFUniCharPropertyDatabase.data" />
      <SBResourceCopy Include="$(StarboardLibDirs)\CFUnicodeData-B.mapping" />
      <SBResourceCopy Include="$(StarboardLibDirs)\CFUnicodeData-L.mapping" />
    </ItemGroup>
  </Target>

  <Target
    Name="ComputeLibsToCopy"
    Condition="'$(CopyStarboardLibraries)' == 'true'"
    BeforeTargets="SBResourcePackage"
    AfterTargets="Link">

    <!-- Write a Dependency Walker Path file -->
    <WriteLinesToFile
      File="$(DepWalkerPathFile)"
      Encoding="ASCII"
      Overwrite="true"
      Lines="UserDir $(StarboardLibDirs);UserDir $(StarboardConfigSpecificLibsDir);UserDir $(StarboardPrebuiltLibsDir);UserDir $(StarboardConfigSpecificPrebuiltLibsDir)" />

    <!-- Call Dependency Walker -->
    <Exec
      IgnoreExitCode="true"
      Command="$(DepWalkerCommand)" />

    <!-- Read Dependency Walker output -->
    <ReadLinesFromFile File="$(DepWalkerOutputFile)">
      <Output TaskParameter="Lines" ItemName="DepWalkerOutputLines"/>
    </ReadLinesFromFile>

    <!-- Extract paths to dependencies -->
    <ItemGroup>
      <SBResourceCopy Include="$([System.Text.RegularExpressions.Regex]::Match('%(DepWalkerOutputLines.Identity)', $(LibPathPattern)).Groups[1].Value)"/>
    </ItemGroup>

    <!-- Clean up -->
    <ItemGroup>
      <DepWalkerOutputLines Remove="@(DepWalkerOutputLines)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <ResolveSDKReferencesDependsOn>ComputeStarboardCRT;AddRuntimeComponentFile;$(ResolveSDKReferencesDependsOn)</ResolveSDKReferencesDependsOn>
  </PropertyGroup>

  <Target Name="ComputeStarboardCRT">

    <!-- Inject a dummy ClangCompile file to gain access to autocomplete arguments for the project.
         If the project doesn't contain any explicit ClangCompile files, this also helps with the
         computation of the StarboardCRT. -->
    <ItemGroup>
      <ClangCompile Include="$(DummyClangFile)">
        <ExcludedFromBuild>true</ExcludedFromBuild>
      </ClangCompile>
    </ItemGroup>

    <PropertyGroup>
      <!-- Choose a CRT to use -->
      <ClangCompileCRTs>@(ClangCompile->Metadata('RuntimeLibrary')->Distinct()->ClearMetadata())</ClangCompileCRTs>
      <ClangCompilePreprocessorDefinitions>@(ClangCompile->Metadata('PreprocessorDefinitions')->Distinct()->ClearMetadata())</ClangCompilePreprocessorDefinitions>
      <StarboardCRT>MultiThreadedDLL</StarboardCRT>
      <StarboardCRT Condition="$(ClangCompileCRTs.Contains('MultiThreadedDebugDLL'))">MultiThreadedDebugDLL</StarboardCRT>
      <!-- Choose configuration that corresponds to the CRT -->
      <StarboardCRTConfig>Release</StarboardCRTConfig>
      <StarboardCRTConfig Condition="'$(StarboardCRT)' == 'MultiThreadedDebugDLL'">Debug</StarboardCRTConfig>
    </PropertyGroup>

    <!-- UseStarboardSourceSdk gates whether a project links against the WinObjC source tree (as an SDK) or a packaged SDK. -->
    <PropertyGroup Condition="'$(UseStarboardSourceSdk)' == 'true'">
      <!-- Library directories for in-tree builds and builds linking against the source tree. -->
      <StarboardLibDirs>$(MSBuildThisFileDirectory)..\build\$(Platform)\$(StarboardCRTConfig)\$(TargetOsAndVersion)</StarboardLibDirs>
      <!-- Directory for built libraries whose configuration must match the client's -->
      <StarboardConfigSpecificLibsDir>$(StarboardLibDirs)\$(StarboardCRTConfig)</StarboardConfigSpecificLibsDir>
      <!-- Prebuilts for all configurations -->
      <StarboardPrebuiltLibsDir>$(MSBuildThisFileDirectory)..\deps\prebuilt\$(TargetOsAndVersion)\$(PlatformTarget)</StarboardPrebuiltLibsDir>
      <!-- Configuration-specific prebuilts (libraries that need to use the same allocator as the client -->
      <StarboardConfigSpecificPrebuiltLibsDir>$(StarboardPrebuiltLibsDir)\$(StarboardCRTConfig)</StarboardConfigSpecificPrebuiltLibsDir>
    </PropertyGroup>
    <PropertyGroup Condition="'$(UseStarboardSourceSdk)' != 'true'">
      <!-- Library directories for projects preferring to link against the packaged SDK. -->
      <!-- Prebuilts and WinObjC libraries live in the same directory once packaged -->
      <StarboardLibDirs>$(StarboardSdkRoot)\lib\$(TargetOsAndVersion)\$(PlatformTarget)</StarboardLibDirs>
      <StarboardConfigSpecificLibsDir>$(StarboardLibDirs)\$(StarboardCRTConfig)</StarboardConfigSpecificLibsDir>
      <StarboardPrebuiltLibsDir>$(StarboardLibDirs)</StarboardPrebuiltLibsDir>
      <!-- Configuration-specific prebuilts retain their configuration specificity, as both Debug and Release are shipped as part of the archive. -->
      <StarboardConfigSpecificPrebuiltLibsDir>$(StarboardLibDirs)\$(StarboardCRTConfig)</StarboardConfigSpecificPrebuiltLibsDir>
    </PropertyGroup>

    <PropertyGroup>
      <StarboardAllLibDirs>$(StarboardLibDirs);$(StarboardConfigSpecificLibsDir);$(StarboardPrebuiltLibsDir);$(StarboardConfigSpecificPrebuiltLibsDir)</StarboardAllLibDirs>
    </PropertyGroup>

    <!-- Print which WinObjC libraries will be used, when copying dependent libraries -->
    <Message
      Condition="'$(UseStarboardSourceSdk)' == 'true'"
      Importance="High"
      Text="Using $(StarboardCRTConfig) WinObjC libraries due to $(StarboardCRT) CRT." />
      
    <!-- UIKit.dll inherits type information from UIKit.Xaml.dll, but the build system doesn't know that, so we have to manually reference it -->
    <ItemGroup>
      <Reference Include="UIKit" Condition="'$(AppContainerApplication)' == 'true' And ('$(IslandwoodDRT)' == 'true' Or $(Link.Contains('UIKit.lib')))">
        <HintPath>$(StarboardLibDirs)\UIKit.Xaml.winmd</HintPath>
        <CopyLocal>false</CopyLocal>
        <Implementation>UIKit.Xaml.dll</Implementation>
      </Reference>
    </ItemGroup>

  </Target>

  <!-- In cases when the project doesn't contain any explicit ClCompile items, adding this file
       ensures that the SDK references are resolved correctly. Otherwise, the APPX will be missing
       the runtime libraries, such as vccorlib140d_app.DLL. -->
  <Target
    Name="AddRuntimeComponentFile"
    DependsOnTargets="ComputeStarboardCRT">

    <ItemGroup Condition="'$(AppContainerApplication)' == 'true' And '$(IslandwoodDRT)' == 'true'">
      <ClCompile Include="$(MSBuildThisFileDirectory)ConsumeRuntimeComponent.cpp">
        <PrecompiledHeader>NotUsing</PrecompiledHeader>
        <RuntimeLibrary>$(StarboardCRT)</RuntimeLibrary>
        <AdditionalOptions Condition="'$(ConfigurationType)' == 'Application'">$(AdditionalOptions) -D_WOC_APP</AdditionalOptions>
      </ClCompile>
    </ItemGroup>

  </Target>

  <Target
    Name="AddObjCTwoStageInitFile"
    DependsOnTargets="ComputeStarboardCRT;ComputeStarboardHasObjCSources">

    <ItemGroup Condition="'$(StarboardHasObjCSources)' == 'true'">
      <ClCompile Include="$(MSBuildThisFileDirectory)\objcrt\objc_2stage_init.cpp">
        <PrecompiledHeader>NotUsing</PrecompiledHeader>
        <RuntimeLibrary>$(StarboardCRT)</RuntimeLibrary>
        <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      </ClCompile>
    </ItemGroup>

  </Target>

  <Target
    Name="_ClangCompile"
    BeforeTargets="$(ClangCompileBeforeTargets)"
    AfterTargets="$(ClangCompileAfterTargets)"
    Condition="'@(ClangCompile)' != ''"
    DependsOnTargets="$(ClangCompileDependsOn)">
    <!-- Handle building of selected files -->
    <ItemGroup Condition="'@(SelectedFiles)' != ''">
      <ClangCompile Remove="@(ClangCompile)" Condition="'%(Identity)' != '@(SelectedFiles)'" />
    </ItemGroup>

    <Message
      Condition="'@(ClangCompile)' != '' and '%(ClangCompile.MaxClangProcesses)' != '1' and '%(ClangCompile.ObjectiveCModules)' == 'true'"
      Importance="High"
      Text="Note: Setting MaxClangProcesses to 1 because Modules are enabled." />

    <ItemGroup>
      <ClangCompile>
        <MaxClangProcesses Condition="'@(ClangCompile)' != '' and '%(ClangCompile.MaxClangProcesses)' != '1' and '%(ClangCompile.ObjectiveCModules)' == 'true'">1</MaxClangProcesses>
      </ClangCompile>
    </ItemGroup>

    <Error Condition="'@(ClangCompile)' != '' and ('%(ClangCompile.MaxClangProcesses)' &lt; '-1' or '%(ClangCompile.MaxClangProcesses)' == '0')"
      Text="%(ClangCompile.MaxClangProcesses) is an invalid value for MaxClangProcesses. MaxClangProcesses must be -1, or a postive integer." />

    <!-- Call Clang, passing AdditionalOptions as the LAST argument -->
    <Clang
      Condition="'@(ClangCompile)' != '' and '%(ClangCompile.ExcludedFromBuild)' != 'true'"
      InternalSystemIncludePaths="%(ClangCompile.InternalSystemIncludePaths)"
      InternalIncludePaths="%(ClangCompile.InternalIncludePaths)"
      InternalForceIncludes="%(ClangCompile.InternalForceIncludes)"
      ExcludedSearchPathSubdirectories="%(ClangCompile.ExcludedSearchPathSubdirectories)"
      Autocomplete="$(ClangAutocomplete)"
      AutocompleteCommandLineTemplate="%(ClangCompile.AutocompleteCommandLineTemplate)"
      CommandLineTemplate="%(ClangCompile.CommandLineTemplate)"
      CommandTLogFile="%(ClangCompile.CommandTLogFile)"
      CompileAs="%(ClangCompile.CompileAs)"
      DebugInformation="%(ClangCompile.DebugInformation)"
      DependencyFile="%(ClangCompile.DependencyFile)"
      ExceptionHandling="%(ClangCompile.ExceptionHandling)"
      HeaderMapInclude="%(ClangCompile.HeaderMapInclude)"
      IncludePaths="%(ClangCompile.IncludePaths)"
      Input="@(ClangCompile)"
      LLVMDirectory="$(StarboardLLVMDirectory)"
      ObjectiveCARC="%(ClangCompile.ObjectiveCARC)"
      ObjectiveCModules="%(ClangCompile.ObjectiveCModules)"
      ObjectiveCModulesCachePath="%(ClangCompile.ObjectiveCModulesCachePath)"
      ObjectFileName="%(ClangCompile.ObjectFileName)"
      OptimizationLevel="%(ClangCompile.OptimizationLevel)"
      PrefixHeader="%(ClangCompile.PrefixHeader)"
      PreprocessorDefinitions="%(ClangCompile.PreprocessorDefinitions)"
      ProjectFile="$(MSBuildProjectFullPath)"
      RuntimeLibrary="%(ClangCompile.RuntimeLibrary)"
      SystemHeaderDeps="%(ClangCompile.SystemHeaderDeps)"
      UserIncludePaths="%(ClangCompile.UserIncludePaths)"
      ReadTLogFile="%(ClangCompile.ReadTLogFile)"
      MaxClangProcesses="%(ClangCompile.MaxClangProcesses)"
      AdditionalOptions="%(ClangCompile.OtherFlags) %(ClangCompile.AdditionalOptions)">
      <Output TaskParameter="Outputs" ItemName="ClangOutputs" />
    </Clang>
  </Target>

  <Target
    Name="GenerateHeaderMaps"
    DependsOnTargets="GenerateCombinedHMap;GenerateProjectHMap;WriteHeaderMaps" />

  <Target
    Name="ComputeCombinedHMap">

    <ItemGroup>
      <HeaderMapEntry Include="%(ClangCompile.RootDir)%(ClangCompile.Directory)*.h" />
      <HeaderMapEntry Include="%(ClangCompile.RootDir)%(ClangCompile.Directory)*.hh" />
      <HeaderMapEntry Include="%(ClangCompile.RootDir)%(ClangCompile.Directory)*.hpp" />
      <HeaderMapEntry Include="%(ClangCompile.RootDir)%(ClangCompile.Directory)*.pch" />
      <HeaderMapEntry Include="%(ClInclude.FullPath)" />
      <HeaderMapEntry Condition="'$(HMapAddFrameworkEntries)' == 'true'" Include="%(ClInclude.FullPath)&#x9;$(TargetName)/%(ClInclude.Filename)%(ClInclude.Extension)" />
      <HeaderMap Include="$(CombinedHMapFilename)" />
    </ItemGroup>
  </Target>

  <Target
    Name="GenerateCombinedHMap"
    DependsOnTargets="ComputeCombinedHMap"
    Condition="'$(CombinedHMapRequired)' == 'true'"
    Inputs="@(HeaderMapEntry)"
    Outputs="$(CombinedHMapFilename).txt">

    <!-- Only support ASCII paths for now -->
    <WriteLinesToFile
      File="$(CombinedHMapFilename).txt"
      Lines="@(HeaderMapEntry)"
      Overwrite="true"
      Encoding="ASCII" />

    <ItemGroup>
      <HeaderMapEntry Remove="@(HeaderMapEntry)" />
    </ItemGroup>
  </Target>

  <Target
    Name="ComputeProjectHMap">

    <ItemGroup>
      <HeaderMapEntry Include="%(ClInclude.FullPath)" />
      <HeaderMapEntry Condition="'$(HMapAddFrameworkEntries)' == 'true'" Include="%(ClInclude.FullPath)&#x9;$(TargetName)/%(ClInclude.Filename)%(ClInclude.Extension)" />
      <HeaderMap Include="$(ProjectHMapFilename)" />
    </ItemGroup>

    <ItemGroup Condition="@(HeaderMapEntry) == ''">
      <HeaderMapEntry Include="Empty" />
    </ItemGroup>
  </Target>

  <Target
    Name="GenerateProjectHMap"
    DependsOnTargets="ComputeProjectHMap"
    Condition="'$(ProjectHMapRequired)' == 'true'"
    Inputs="@(HeaderMapEntry)"
    Outputs="$(ProjectHMapFilename).txt">

    <!-- Only support ASCII paths for now -->
    <WriteLinesToFile
      File="$(ProjectHMapFilename).txt"
      Lines="@(HeaderMapEntry)"
      Overwrite="true"
      Encoding="ASCII" />

    <ItemGroup>
      <HeaderMapEntry Remove="@(HeaderMapEntry)" />
    </ItemGroup>
  </Target>

  <Target
    Name="WriteHeaderMaps"
    Condition="'@(HeaderMap)' != ''"
    Inputs="@(HeaderMap->'%(Identity).txt')"
    Outputs="@(HeaderMap->'%(Identity).hmap')">

    <Exec
      Command="&quot;$(MSBuildThisFileDirectory)..\bin\hmapmaker.exe&quot; &quot;%(HeaderMap.Identity).txt&quot; &quot;%(HeaderMap.Identity).hmap&quot;" />
  </Target>

  <!-- Create parent directories for all object files -->
  <Target Name="MakeDirsForClang" Condition="'@(ClangCompile)' != ''" DependsOnTargets="ComputeClangOptions">
    <MakeDir Directories="@(ClangCompile->Metadata('ObjectFileName')->DirectoryName()->Distinct()->ClearMetadata())" />
  </Target>
  
  <Target
    Name="ComputeClangOptions"
    DependsOnTargets="ComputeStarboardCRT">

    <!-- Figure out what to compile each file as -->
    <ItemGroup>
      <ClangCompile Condition="'%(ClangCompile.CompileAs)' == 'Default' or '%(ClangCompile.CompileAs)' == ''">
        <CompileAs Condition="'%(Extension)'=='.c'">CompileAsC</CompileAs>
        <CompileAs Condition="'%(Extension)'=='.m'">CompileAsObjC</CompileAs>
        <CompileAs Condition="'%(Extension)'=='.cpp' or '%(Extension)'=='.cc' or '%(Extension)'=='.cxx'">CompileAsCpp</CompileAs>
        <CompileAs Condition="'%(Extension)'=='.mm' or '%(Extension)'=='.mxx'">CompileAsObjCpp</CompileAs>
      </ClangCompile>
    </ItemGroup>

    <!-- Figure out language-specific flags -->
    <ItemGroup>
      <ClangCompile>
        <OtherFlags Condition="'%(ClangCompile.CompileAs)' == 'CompileAsC' or
                               '%(ClangCompile.CompileAs)' == 'CompileAsObjC'">%(ClangCompile.OtherCFlags)</OtherFlags>
        <OtherFlags Condition="'%(ClangCompile.CompileAs)' == 'CompileAsCpp' or
                               '%(ClangCompile.CompileAs)' == 'CompileAsObjCpp'">%(ClangCompile.OtherCPlusPlusFlags)</OtherFlags>
      </ClangCompile>
    </ItemGroup>

    <!-- Figure out which header map to use -->
    <ItemGroup>
      <ClangCompile>
        <HeaderMapInclude Condition="'%(ClangCompile.HeaderMap)' == 'Project'">-I"$(ProjectHMapFilename).hmap"</HeaderMapInclude>
        <HeaderMapInclude Condition="'%(ClangCompile.HeaderMap)' == 'Combined'">-I"$(CombinedHMapFilename).hmap"</HeaderMapInclude>
      </ClangCompile>
    </ItemGroup>

    <!-- Add in the ClCompile additional include directories to clang. -->
    <PropertyGroup>
      <_ShouldMakeTmpClCompile Condition="'@(ClCompile)' == ''">true</_ShouldMakeTmpClCompile>
    </PropertyGroup>
    <ItemGroup>
      <ClCompile Include="_tmp" Condition="'$(_ShouldMakeTmpClCompile)' == 'true'"/>
      <ClangCompile Condition="'%(ClangCompile.Identity)' != ''">
          <IncludePaths>@(ClCompile->Metadata('AdditionalIncludeDirectories')->Distinct()->ClearMetadata());%(ClangCompile.IncludePaths);</IncludePaths>
      </ClangCompile>
      <ClCompile Remove="_tmp" Condition="'$(_ShouldMakeTmpClCompile)' == 'true'"/>
    </ItemGroup>

    <!-- Figure out WOCStdlib options to use -->
    <ItemGroup>
      <ClangCompile>
        <InternalSystemIncludePaths Condition="'%(ClangCompile.WOCStdlib)' == 'true'">$(StarboardSdkRoot)\include\WOCStdLib;%(InternalSystemIncludePaths)</InternalSystemIncludePaths>
        <InternalForceIncludes Condition="'%(ClangCompile.WOCStdlib)' == 'true'">WOCStdlib.h;%(InternalForceIncludes)</InternalForceIncludes>
      </ClangCompile>
    </ItemGroup>

    <!-- Figure out whether Objective-C should be pinned -->
    <ItemGroup>
      <ClangCompile>
        <InternalForceIncludes Condition="'%(ClangCompile.CompileAs)' == 'CompileAsObjC' or
                                          '%(ClangCompile.CompileAs)' == 'CompileAsObjCpp'">$(MSBuildThisFileDirectory)\objcrt\objc_2stage_init.h;%(InternalForceIncludes)</InternalForceIncludes>
      </ClangCompile>
    </ItemGroup>

  </Target>

  <!-- Ensure Link/Lib/ImpLib pick up the object files -->
  <ItemDefinitionGroup>
    <ClangOutputs>
      <LinkCompiled>$(LinkCompiled)</LinkCompiled>
      <LibCompiled>$(LibCompiled)</LibCompiled>
      <ImpLibCompiled>$(ImpLibCompiled)</ImpLibCompiled>
    </ClangOutputs>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <ComputeLinkInputsTargets>$(ComputeLinkInputsTargets);ComputeClangLinkInputs;ComputeRuntimeInputs</ComputeLinkInputsTargets>
    <ComputeLibInputsTargets>$(ComputeLibInputsTargets);ComputeClangLibInputs;</ComputeLibInputsTargets>
    <ComputeImpLibInputsTargets>$(ComputeImpLibInputsTargets);ComputeClangImpLibInputs;</ComputeImpLibInputsTargets>
  </PropertyGroup>

  <!-- Fix up AdditionalLibraryDirectories before the CreateWinMD target runs. -->
  <Target
    Name="FixAdditionalLibraryDirectoriesWinMD"
    DependsOnTargets="$(ComputeLinkInputsTargets)"
    BeforeTargets="CreateWinMD">

    <ItemGroup>
      <Link Condition="'%(Link.ContainsStarboardLibraryDirectories)' != 'true'">
        <AdditionalLibraryDirectories>%(Link.AdditionalLibraryDirectories);$(StarboardAllLibDirs)</AdditionalLibraryDirectories>
        <ContainsStarboardLibraryDirectories>true</ContainsStarboardLibraryDirectories>
      </Link>
    </ItemGroup>

  </Target>

  <!-- The build process for XAML files adds Link item(s) in between the execution of CreateWinMD and Link targets.
       These items need to be updated with our AdditionalLibraryDirectories. Otherwise, a mismatch of
       metadata will result in multiple invocations of link.exe due to task batching. -->
  <Target
    Name="FixAdditionalLibraryDirectoriesLink"
    DependsOnTargets="FixAdditionalLibraryDirectoriesWinMD"
    BeforeTargets="Link">

    <ItemGroup>
      <Link Condition="'%(Link.ContainsStarboardLibraryDirectories)' != 'true'">
        <AdditionalLibraryDirectories>%(Link.AdditionalLibraryDirectories);$(StarboardAllLibDirs)</AdditionalLibraryDirectories>
        <ContainsStarboardLibraryDirectories>true</ContainsStarboardLibraryDirectories>
      </Link>
    </ItemGroup>

  </Target>

  <!-- Sets StarboardHasObjCSources based on whether any files in this project are being built as Objective-C -->
  <Target Name="ComputeStarboardHasObjCSources" DependsOnTargets="ComputeClangOptions">
    <ItemGroup>
      <ObjCSources Include="@(ClangCompile)" Condition="'%(ClangCompile.ExcludedFromBuild)' != 'true' And ('%(ClangCompile.CompileAs)' == 'CompileAsObjC' or '%(ClangCompile.CompileAs)' == 'CompileAsObjCpp')" />
    </ItemGroup>

    <PropertyGroup>
      <StarboardHasObjCSources Condition="'$(StarboardHasObjCSources)' == '' And '@(ObjCSources)' != ''">true</StarboardHasObjCSources>
    </PropertyGroup>

    <ItemGroup>
      <ObjCSources Remove="@(ObjCSources)" />
    </ItemGroup>
  </Target>

  <!-- Sets StarboardRequiresObjectiveCRuntime based on whether this project has Objective-C sources non-recursively. -->
  <Target Name="ComputeStarboardRequiresObjectiveCRuntime" DependsOnTargets="ComputeStarboardHasObjCSources">
    <PropertyGroup Condition="'$(StarboardRequiresObjectiveCRuntime)' == ''">
      <StarboardRequiresObjectiveCRuntime Condition="'@(_StarboardReferencesRequiringObjectiveC)' != ''">true</StarboardRequiresObjectiveCRuntime>
      <StarboardRequiresObjectiveCRuntime Condition="'$(StarboardHasObjCSources)' == 'true'">true</StarboardRequiresObjectiveCRuntime>
    </PropertyGroup>
  </Target>

  <Target Name="ComputeRuntimeInputs" DependsOnTargets="ComputeClangOptions;ComputeStarboardRequiresObjectiveCRuntime">
    <ItemGroup>
      <Link Condition="'$(StarboardLinkObjCRuntime)' == 'true' and '$(StarboardRequiresObjectiveCRuntime)' == 'true'" Include="$(StarboardObjCRuntimeLib)"/>
      <Link Condition="'$(StarboardRuntimeLib)' != '' And '$(IslandwoodDRT)' == 'true'" Include="$(StarboardRuntimeLib)"/>
      <Link Condition="'$(StarboardDefaultLibs)' != '' And '$(IslandwoodDRT)' == 'true'" Include="$(StarboardDefaultLibs)"/>
    </ItemGroup>
  </Target>

  <Target Name="ComputeClangLinkInputs" DependsOnTargets="_ClangCompile">
    <ItemGroup>
      <Link Condition="'%(ClangOutputs.LinkCompiled)' == 'true'" Include="%(ClangOutputs.ObjectFileName)" />
    </ItemGroup>
  </Target>
  <Target Name="ComputeClangLibInputs" DependsOnTargets="ComputeClangOptions;_ClangCompile">
    <ItemGroup>
      <Lib Condition="'%(ClangOutputs.LibCompiled)' == 'true'" Include="%(ClangOutputs.ObjectFileName)" />
    </ItemGroup>
  </Target>
  <Target Name="ComputeClangImpLibInputs" DependsOnTargets="ComputeClangOptions;_ClangCompile">
    <ItemGroup>
      <ImpLib Condition="'%(ClangOutputs.ImpLibCompiled)' == 'true'" Include="%(ClangOutputs.ObjectFileName)" />
    </ItemGroup>
  </Target>

  <!-- Recursive Target.
       Returns a list of .lib files from all referenced projects that include Objective-C code by
       invoking _ComputeStarboardReferencedProjectRequiresObjectiveC on them.
  -->
  <Target Name="ComputeStarboardReferencesRequiringObjectiveC">
    <!-- Not all references are guaranteed to contain the target, so filter out the ones that don't -->
    <!-- NOTE: We must explicitly pass in any properties needed to load referenced projects.
         Msbuild mandates that any properties needed by the task must be explicitly passed -->
    <ProjectsWithTarget
      Projects="@(_MSBuildProjectReferenceExistent)"
      TargetName="_ComputeStarboardReferencedProjectRequiresObjectiveC"
      WinobjcSDKRoot="$(WINOBJC_SDK_ROOT)">
      <Output TaskParameter="FilteredProjects" ItemName="ProjectReferencesFiltered" />
    </ProjectsWithTarget>

    <MSBuild
      Projects="@(ProjectReferencesFiltered)"
      Targets="_ComputeStarboardReferencedProjectRequiresObjectiveC"
      BuildInParallel="$(BuildInParallel)"
      Properties="%(ProjectReferencesFiltered.SetConfiguration); %(ProjectReferencesFiltered.SetPlatform)"
      Condition="'%(ProjectReferencesFiltered.Extension)' == '.vcxproj' and '@(ProjectReferenceWithConfiguration)' != '' and '@(ProjectReferencesFiltered)' != ''"
      ContinueOnError="!$(BuildingProject)"
      RemoveProperties="%(ProjectReferencesFiltered.GlobalPropertiesToRemove)">
      <Output TaskParameter="TargetOutputs" ItemName="_StarboardReferencesRequiringObjectiveC"/>
    </MSBuild>

    <ItemGroup>
      <ProjectReferencesFiltered Remove="@(ProjectReferencesFiltered)" />
    </ItemGroup>
  </Target>

  <!-- Returns every output from <Lib> in this project if we include Objective-C code.
       Right now, we only go so far as to check whether we have Objective-C ourselves. A lib consuming a lib
       consuming Objective-C will not be considered to be consuming Objective-C.
       We should consider recursing.
  -->
  <Target Name="_ComputeStarboardReferencedProjectRequiresObjectiveC" Returns="@(ObjCLibFullPath)" DependsOnTargets="ComputeStarboardHasObjCSources">
    <ItemGroup>
      <Lib Include="tmp"  Condition="'@(Lib)'==''">
       <DeleteSoon>true</DeleteSoon>
      </Lib>
    </ItemGroup>
    <PropertyGroup>
      <!-- Consider recursing on this rule to capture libs aggregating Objective-C libs. -->
      <_ObjCLibFullPath Condition="'$(ConfigurationType)'=='StaticLibrary' and '$(StarboardHasObjCSources)'=='true'">@(Lib->MetaData('OutputFile')->FullPath()->Distinct())</_ObjCLibFullPath>
    </PropertyGroup>
    <ItemGroup>
      <ObjCLibFullPath Include="$(_ObjCLibFullPath)">
        <FileType>lib</FileType>
        <ConsumesObjectiveC>$(StarboardHasObjCSources)</ConsumesObjectiveC>
      </ObjCLibFullPath>
      <Lib Remove="@(Lib)" Condition="'%(Lib.DeleteSoon)'=='true'" />
    </ItemGroup>
  </Target>

  <!-- This target adds one /WHOLEARCHIVE: for every referenced project that includes Objective-C code.
       This pulls in a lot of things, but it clears up many of the issues surrounding Objective-C categories
       and 2-stage loading.
  -->
  <Target Name="ComputeWholeArchiveLinkInputs" DependsOnTargets="ComputeStarboardReferencesRequiringObjectiveC">
    <ItemGroup Condition="'@(_StarboardReferencesRequiringObjectiveC)'!='' and '$(StarboardLinkWholeArchive)'=='true'">
      <Link>
        <AdditionalOptions>%(Link.AdditionalOptions) "/WHOLEARCHIVE:@(_StarboardReferencesRequiringObjectiveC, '" /WHOLEARCHIVE:"')"</AdditionalOptions>
      </Link>
    </ItemGroup>
  </Target>

  <!-- Clean generated files -->
  <PropertyGroup>
    <CleanDependsOn>$(CleanDependsOn);CleanClang;CleanDepWalkerFiles;CleanObjc2WinmdGeneratedFiles</CleanDependsOn>
  </PropertyGroup>

  <Target Name="CleanClang" Condition="'@(ClangCompile)' != ''" DependsOnTargets="ComputeClangOptions">
    <!-- Delete header maps -->
    <Delete Files="$(CombinedHMapFilename).txt;$(CombinedHMapFilename).hmap;$(ProjectHMapFilename).txt;$(ProjectHMapFilename).hmap" />
    <RemoveDir Directories="@(ClangCompile->Metadata('ObjectiveCModulesCachePath')->Distinct()->ClearMetadata())" />
  </Target>

  <Target Name="CleanDepWalkerFiles">
    <!-- Delete Dependency Walker files -->
    <Delete Files="$(DepWalkerPathFile);$(DepWalkerOutputFile)" />
  </Target>
</Project>
