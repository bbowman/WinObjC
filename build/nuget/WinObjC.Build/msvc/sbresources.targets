<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <PropertyPageSchema
      Include="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).xml" />
    <AvailableItemName Include="SBResourceCopy">
      <Targets>_SBResourceCopy</Targets>
    </AvailableItemName>
    <AvailableItemName Include="SBInfoPlistCopy">
      <Targets>CopyInfoPlist</Targets>
    </AvailableItemName>
    <AvailableItemName Include="XibCompile">
      <Targets>_XibCompile</Targets>
    </AvailableItemName>
    <AvailableItemName Include="StoryboardCompile">
      <Targets>_StoryboardCompile</Targets>
    </AvailableItemName>
    <AvailableItemName Include="DataModelCompile">
      <Targets>_DataModelCompile</Targets>
    </AvailableItemName>
    <AvailableItemName Include="DataModelDirCompile">
      <Targets>_DataModelDirCompile</Targets>
    </AvailableItemName>
    <AvailableItemName Include="AssetCatalogCompile">
      <Targets>_AssetCatalogCompile</Targets>
    </AvailableItemName>
  </ItemGroup>

  <Import Project="$(MSBuildThisFileDirectory)zip.tasks" />

  <PropertyGroup>
    <Xib2NibExe>$(MSBuildThisFileDirectory)..\bin\Xib2Nib.exe</Xib2NibExe>
    <SbExpandVarsExe>$(MSBuildThisFileDirectory)..\bin\sb-expandvars.exe</SbExpandVarsExe>
    <ACBuilderExe>$(MSBuildThisFileDirectory)..\bin\acbuilder.exe</ACBuilderExe>
    <SBResourceCompileDependsOn>_XibCompile;_StoryboardCompile;_DataModelCompile;_DataModelDirCompile;_AssetCatalogCompile;CopyInfoPlist</SBResourceCompileDependsOn>
    <SBResourceCompileBeforeTargets></SBResourceCompileBeforeTargets>
    <SBResourceCompileAfterTargets>Link</SBResourceCompileAfterTargets>
    <SBResourceCompileAfterTargets Condition="'$(IslandwoodConfigurationType)' == 'Bundle'">BuildLink</SBResourceCompileAfterTargets>
    <SBResourceComputeTargets>ComputeXibCompileOptions;ComputeStoryboardCompileOptions;ComputeDataModelCompileOptions;ComputeDataModelDirCompileOptions;ComputeAssetCatalogCompileOptions;ComputePlistCopyOptions</SBResourceComputeTargets>
  </PropertyGroup>

  <PropertyGroup>
    <!-- SBResourcesDir is not the final destination in the case we're building an AppX
         AppxPackagePayload takes care of the copying in that case -->
    <SBResourcesDir Condition="'$(SBResourceCopyToAPPX)' != 'true'">$(OutDir)</SBResourcesDir>
    <SBResourcesDir Condition="'$(SBResourceCopyToAPPX)' == 'true'"></SBResourcesDir>
    <SBResourcesDir Condition="'$(IslandwoodConfigurationType)' == 'Bundle'">$(OutDir)\$(TargetName).bundle</SBResourcesDir>
  </PropertyGroup>

  <Target
    Name="SBResourceCompile"
    BeforeTargets="$(SBResourceCompileBeforeTargets)"
    AfterTargets="$(SBResourceCompileAfterTargets)"
    DependsOnTargets="$(SBResourceCompileDependsOn);_SBResourceCopy;SBResourcePackage" />

  <Target
    Name="CheckForMultiplePlists"
    AfterTargets="Link"
    BeforeTargets="CopyInfoPlist"
    Condition="'@(SBInfoPlistCopy->Count())' &gt; '1'"
    DependsOnTargets="ComputePlistCopyOptions">

    <Error Text="You can only specify a single Info.plist file! Files specified: @(SBInfoPlistCopy)" />
  </Target>

  <Target
    Name="CheckForMultipleAssetCatalogs"
    AfterTargets="Link"
    BeforeTargets="_AssetCatalogCompile"
    Condition="'@(AssetCatalogCompile->Count())' &gt; '1'"
    DependsOnTargets="ComputeAssetCatalogCompileOptions">

    <Error Text="You can only specify a single Asset Catalog! Files specified: @(AssetCatalogCompile)" />
  </Target>

  <Target
    Name="CopyInfoPlist"
    DependsOnTargets="ComputePlistCopyOptions"
    Condition="'@(SBInfoPlistCopy)' != ''"
    Outputs="@(SBInfoPlistCopy->'%(IntermediateFile)')"
    Inputs="$(SbExpandVarsExe);@(SBInfoPlistCopy->'%(VariableFile)');@(SBInfoPlistCopy->'%(Identity)')">

    <Message
      Condition="'%(SBInfoPlistCopy.ExcludedFromBuild)' != 'true'"
      Importance="High"
      Text="%(SBInfoPlistCopy.Identity)" />

   <Exec
      Condition="'%(SBInfoPlistCopy.ExcludedFromBuild)' != 'true'"
      Command="&quot;$(SbExpandVarsExe)&quot; -i &quot;%(SBInfoPlistCopy.Identity)&quot; -o &quot;%(SBInfoPlistCopy.IntermediateFile)&quot; -x &quot;%(SBInfoPlistCopy.VariableFile)&quot;" />
  </Target>

  <Target
    Name="SBResourcePackage"
    DependsOnTargets="ComputeResourceCopyOptions"
    Inputs="@(SBResourceCopy)"
    Outputs="$(AppxPackageRecipe)"
    Condition="'@(SBResourceCopy)' != '' and '$(SBResourceCopyToAPPX)' == 'true'">

    <ItemGroup>
      <_UnfilteredAppxPackagePayload Include="@(SBResourceCopy->'%(FullPath)')" Condition="'%(SBResourceCopy.ExcludedFromBuild)' != 'true'">
        <TargetPath>%(SBResourceCopy.OutputFile)</TargetPath>
        <ProjectName>$(ProjectName)</ProjectName>
        <OutputGroup>BuiltProjectOutputGroup</OutputGroup>
      </_UnfilteredAppxPackagePayload>
    </ItemGroup>

    <Message Importance="high"
      Text="Packaging assets" />

    <Message
      Condition="'%(SBResourceCopy.ExcludedFromBuild)' != 'true'"
      Importance="high"
      Text="%(SBResourceCopy.Identity)" />
  </Target>

  <Target
    Name="ComputeResourceTLog"
    DependsOnTargets="ComputeResourceCopyOptions"
    Condition="'@(SBResourceCopy)' != '' and '$(AppContainerApplication)' != 'true'">
    <!-- Ensure out of date resources causes a rebuild in VS -->
    <WriteLinesToFile File="$(TLogLocation)$(ProjectName).read.res.tlog" Overwrite="true" Lines="^$(ProjectPath);@(SBResourceCopy->'%(FullPath)')" Condition="'@(SBResourceCopy)' != ''" Encoding="Unicode"/>
    <WriteLinesToFile File="$(TLogLocation)$(ProjectName).write.res.tlog" Overwrite="true" Lines="^$(ProjectPath);@(SBResourceCopy->'%(OutputFile)')" Condition="'@(SBResourceCopy)' != ''" Encoding="Unicode"/>   
  </Target>

  <Target
    Name="ComputeToolsTLog"
    AfterTargets="Link">
    <!-- Ensure change to tool executables causes a rebuild in VS -->
    <WriteLinesToFile File="$(TLogLocation)tools.read.res.tlog" Overwrite="true" Lines="^$(ProjectPath);$(Xib2NibExe);$(SbExpandVarsExe);$(ACBuilderExe)" Encoding="Unicode"/>
  </Target>

  <Target
    Name="_SBResourceCopy"
    DependsOnTargets="ComputeResourceCopyOptions;ComputeResourceTLog"
    Inputs="@(SBResourceCopy)"
    Outputs="@(SBResourceCopy->'%(OutputFile)')"
    Condition="'@(SBResourceCopy)' != '' and '$(SBResourceCopyToAPPX)' != 'true'">

    <Message Importance="high"
      Text="Copying assets" />

    <MakeDir
      Condition="'%(SBResourceCopy.ExcludedFromBuild)' != 'true'"
      Directories="@(SBResourceCopy->Metadata('OutputFile')->DirectoryName()->Distinct()->ClearMetadata())" />

    <Copy
      Condition="'@(SBResourceCopy)' != '' and '%(SBResourceCopy.ExcludedFromBuild)' != 'true'"
      SourceFiles="@(SBResourceCopy)"
      DestinationFiles="@(SBResourceCopy->'%(OutputFile)')" />

    <Exec
      Condition="'$(StripAppContainerBit)' == 'true' and $([System.IO.Path]::GetExtension('%(SBResourceCopy.OutputFile)').ToUpper()) == '.DLL'"
      Command="Link.exe /EDIT /NOLOGO /APPCONTAINER:NO %(SBResourceCopy.OutputFile)" />

  </Target>

  <Target
    Name="_XibCompile"
    DependsOnTargets="ComputeXibCompileOptions"
    Inputs="$(Xib2NibExe);@(XibCompile)"
    Outputs="@(XibCompile->'%(IntermediateFile)')"
    Condition="'@(XibCompile)' != ''">

    <Message
      Condition="'%(XibCompile.ExcludedFromBuild)' != 'true'"
      Importance="High"
      Text="%(XibCompile.Identity)" />

    <MakeDir
      Condition="'%(XibCompile.ExcludedFromBuild)' != 'true'"
      Directories="@(XibCompile->Metadata('IntermediateFile')->DirectoryName()->Distinct()->ClearMetadata())" />

    <Exec
      Condition="'%(XibCompile.ExcludedFromBuild)' != 'true'"
      Command="&quot;$(Xib2NibExe)&quot; &quot;%(XibCompile.Identity)&quot; &quot;%(XibCompile.IntermediateFile)&quot;" />
  </Target>

  <Target
    Name="_StoryboardCompile"
    DependsOnTargets="ComputeStoryboardCompileOptions"
    Condition="'@(StoryboardCompile)' != ''"
    Outputs="%(StoryboardCompile.IntermediateFile)"
    Inputs="$(Xib2NibExe);%(StoryboardCompile.Identity)">

    <Message
      Condition="'%(StoryboardCompile.ExcludedFromBuild)' != 'true'"
      Importance="High"
      Text="%(StoryboardCompile.Identity)" />

    <MakeDir
      Condition="'%(StoryboardCompile.ExcludedFromBuild)' != 'true'"
      Directories="@(StoryboardCompile->Metadata('IntermediateFile')->DirectoryName()->Distinct()->ClearMetadata())" />

    <Exec
      Condition="'%(StoryboardCompile.ExcludedFromBuild)' != 'true'"
      Command="&quot;$(Xib2NibExe)&quot; &quot;%(StoryboardCompile.Identity)&quot; &quot;%(StoryboardCompile.IntermediateFile)&quot;" />
  </Target>

  <Target
    Name="_DataModelCompile"
    DependsOnTargets="ComputeDataModelCompileOptions"
    Condition="'@(DataModelCompile)' != ''"
    Outputs="%(DataModelCompileFile.OutputFile)"
    Inputs="%(DataModelCompileFile.SourceFile);%(DataModelCompileFile.Identity)">

    <Message
      Condition="'%(DataModelCompileFile.ExcludedFromBuild)' != 'true' and Exists('%(DataModelCompileFile.SourceFile)')"
      Importance="High"
      Text="Data Model compilation not currently supported. Ignoring %(DataModelCompileFile.SourceFile)" />

    <Message
      Condition="'%(DataModelCompileFile.ExcludedFromBuild)' != 'true' and !Exists('%(DataModelCompileFile.SourceFile)')"
      Importance="High"
      Text="%(DataModelCompileFile.SourceFile) does not exist. Project will never be up to date." />

    <MakeDir
      Condition="'%(DataModelCompileFile.ExcludedFromBuild)' != 'true'"
      Directories="@(DataModelCompileFile->Metadata('OutputFile')->DirectoryName()->Distinct()->ClearMetadata())" />

    <WriteLinesToFile
      Condition="'%(DataModelCompileFile.ExcludedFromBuild)' != 'true'"
      File="%(DataModelCompileFile.OutputFile)"
      Lines="Data Model compilation not currently supported."
      Overwrite="true"
      Encoding="Unicode"/>
  </Target>

  <Target
    Name="_DataModelDirCompile"
    DependsOnTargets="ComputeDataModelDirCompileOptions"
    Condition="'@(DataModelDirCompile)' != ''"
    Outputs="%(DataModelDirCompileFile.OutputFile)"
    Inputs="%(DataModelDirCompileFile.SourceFile);%(DataModelDirCompileFile.Identity)">

    <Message
      Condition="'%(DataModelDirCompileFile.ExcludedFromBuild)' != 'true'"
      Importance="High"
      Text="Data Model Directory compilation not currently supported. Ignoring %(DataModelDirCompileFile.SourceFile)" />

    <MakeDir
      Condition="'%(DataModelDirCompileFile.ExcludedFromBuild)' != 'true'"
      Directories="@(DataModelDirCompileFile->Metadata('OutputFile')->DirectoryName()->Distinct()->ClearMetadata())" />

    <WriteLinesToFile
      Condition="'%(DataModelDirCompileFile.ExcludedFromBuild)' != 'true'"
      File="%(DataModelDirCompileFile.OutputFile)"
      Lines="Data Model Directory compilation not currently supported."
      Overwrite="true"
      Encoding="Unicode"/>
  </Target>

  <Target
    Name="_AssetCatalogCompile"
    DependsOnTargets="ComputeAssetCatalogCompileOptions"
    Condition="'@(AssetCatalogCompile)' != ''"
    Outputs="%(AssetCatalogCompileFile.OutputDir)"
    Inputs="$(ACBuilderExe);%(AssetCatalogCompileFile.SourceFile);%(AssetCatalogCompileFile.Identity)">

    <Message
      Condition="'%(AssetCatalogCompileFile.ExcludedFromBuild)' != 'true'"
      Importance="High"
      Text="%(AssetCatalogCompileFile.SourceFile)" />

    <RemoveDir
      Condition="'%(AssetCatalogCompileFile.ExcludedFromBuild)' != 'true'"
      Directories="%(AssetCatalogCompileFile.OutputDir)" />

    <MakeDir
      Condition="'%(AssetCatalogCompileFile.ExcludedFromBuild)' != 'true'"
      Directories="%(AssetCatalogCompileFile.OutputDir)" />

    <Exec
      Condition="'%(AssetCatalogCompileFile.ExcludedFromBuild)' != 'true'"
      Command="&quot;$(ACBuilderExe)&quot; --notices --target-device iphone --target-device ipad --compile &quot;%(AssetCatalogCompileFile.OutputDir)&quot; &quot;%(AssetCatalogCompileFile.SourceFile)&quot;" />

    <ItemGroup>
      <SBResourceCopy Include="%(AssetCatalogCompileFile.OutputDir)\**\*" />
    </ItemGroup>
  </Target>

  <Target
    Name="ComputeResourceCopyOptions"
    DependsOnTargets="$(SBResourceComputeTargets)">

    <ItemGroup>
      <!-- Include files in any directories to be copied -->
      <SBResourceCopy Condition="'@(SBResourceCopy)' != ''" Include="%(SBResourceCopy.Identity)\**\*">
        <SourceDir>%(SBResourceCopy.Identity)</SourceDir>
        <SourceDirName>%(SBResourceCopy.Filename)%(SBResourceCopy.Extension)</SourceDirName>
        <VariantDir>%(SBResourceCopy.VariantDir)</VariantDir>
        <ExcludedFromBuild>%(SBResourceCopy.ExcludedFromBuild)</ExcludedFromBuild>
      </SBResourceCopy>

      <!-- Remove directories from SBResourceCopy -->
      <SBResourceCopy Remove="@(SBResourceCopy->Metadata('SourceDir')->Distinct()->ClearMetadata())" />

      <!-- Remove files excluded from the build -->
      <SBResourceCopy Remove="@(SBResourceCopy->WithMetadataValue('ExcludedFromBuild', 'true'))" />

      <!-- Fix up OutputFile path -->
      <SBResourceCopy>
        <OutputFile>$([System.IO.Path]::Combine('$(SBResourcesDir)', '%(SBResourceCopy.VariantDir)', '%(SBResourceCopy.SourceDirName)', '%(SBResourceCopy.RecursiveDir)', '%(SBResourceCopy.Filename)%(SBResourceCopy.Extension)'))</OutputFile>
      </SBResourceCopy>
    </ItemGroup>
  </Target>

  <Target Name="ComputeXibCompileOptions">
    <ItemGroup>
      <!-- Fix up IntermediateFile to use VariantDir -->
      <XibCompile>
        <IntermediateFile>$([System.IO.Path]::Combine('$(IntDir)', '%(XibCompile.VariantDir)', '%(XibCompile.Filename)')).nib</IntermediateFile>
      </XibCompile>
    </ItemGroup>
    <ItemGroup>
      <SBResourceCopy Include="@(XibCompile->'%(IntermediateFile)')" />
    </ItemGroup>
  </Target>

  <Target Name="ComputeStoryboardCompileOptions">
    <ItemGroup>
      <!-- Fix up IntermediateFile to use VariantDir -->
      <StoryboardCompile>
        <IntermediateFile>$([System.IO.Path]::Combine('$(IntDir)', '%(StoryboardCompile.VariantDir)', '%(StoryboardCompile.Filename)')).storyboardc</IntermediateFile>
      </StoryboardCompile>
    </ItemGroup>
    <ItemGroup>
      <SBResourceCopy Include="@(StoryboardCompile->'%(IntermediateFile)')" />
    </ItemGroup>
  </Target>

  <Target Name="ComputeDataModelCompileOptions">
    <ItemGroup Condition="'@(DataModelCompile)' != ''">
      <!-- Fix up IntermediateFile to use VariantDir -->
      <DataModelCompile>
        <IntermediateFile>$([System.IO.Path]::Combine('$(IntDir)', '%(DataModelCompile.VariantDir)', '%(DataModelCompile.Filename)')).mom.dummy</IntermediateFile>
      </DataModelCompile>
      <DataModelCompileFile Include="%(DataModelCompile.Identity);%(DataModelCompile.Identity)\**\*">
        <SourceFile>%(DataModelCompile.Identity)</SourceFile>
        <OutputFile>%(DataModelCompile.IntermediateFile)</OutputFile>
        <ExcludedFromBuild>%(DataModelCompile.ExcludedFromBuild)</ExcludedFromBuild>
      </DataModelCompileFile>
    </ItemGroup>
  </Target>

  <Target Name="ComputeDataModelDirCompileOptions">
    <ItemGroup Condition="'@(DataModelDirCompile)' != ''">
      <!-- Fix up IntermediateFile to use VariantDir -->
      <DataModelDirCompile>
        <IntermediateFile>$([System.IO.Path]::Combine('$(IntDir)', '%(DataModelDirCompile.VariantDir)', '%(DataModelDirCompile.Filename)')).momc.dummy</IntermediateFile>
      </DataModelDirCompile>
      <DataModelDirCompileFile Include="%(DataModelDirCompile.Identity);%(DataModelDirCompile.Identity)\**\*">
        <SourceFile>%(DataModelDirCompile.Identity)</SourceFile>
        <OutputFile>%(DataModelDirCompile.IntermediateFile)</OutputFile>
        <ExcludedFromBuild>%(DataModelDirCompile.ExcludedFromBuild)</ExcludedFromBuild>
      </DataModelDirCompileFile>
    </ItemGroup>
  </Target>

  <Target Name="ComputeAssetCatalogCompileOptions">
    <ItemGroup Condition="'@(AssetCatalogCompile)' != ''">
      <!-- Fix up IntermediateFile to use VariantDir -->
      <AssetCatalogCompile>
        <IntermediateDir>$([System.IO.Path]::Combine('$(IntDir)', 'AssetCatalog'))</IntermediateDir>
      </AssetCatalogCompile>
      <AssetCatalogCompileFile Include="%(AssetCatalogCompile.Identity);%(AssetCatalogCompile.Identity)\**\*">
        <SourceFile>%(AssetCatalogCompile.Identity)</SourceFile>
        <OutputDir>%(AssetCatalogCompile.IntermediateDir)</OutputDir>
        <ExcludedFromBuild>%(AssetCatalogCompile.ExcludedFromBuild)</ExcludedFromBuild>
      </AssetCatalogCompileFile>
      <!-- Remove items excluded from the build, so we can get an accurate count later -->
      <AssetCatalogCompile Remove="@(AssetCatalogCompile->WithMetadataValue('ExcludedFromBuild', 'true'))" />
    </ItemGroup>
  </Target>

  <Target Name="ComputePlistCopyOptions">
    <ItemGroup>
      <!-- Remove items excluded from the build, so we can get an accurate count later -->
      <SBInfoPlistCopy Remove="@(SBInfoPlistCopy->WithMetadataValue('ExcludedFromBuild', 'true'))" />
      <!-- Fix up IntermediateFile to use VariantDir -->
      <SBInfoPlistCopy>
        <IntermediateFile>$([System.IO.Path]::Combine('$(IntDir)', 'Info.plist'))</IntermediateFile>
      </SBInfoPlistCopy>
    </ItemGroup>
    <ItemGroup>
      <SBResourceCopy Include="@(SBInfoPlistCopy->'%(IntermediateFile)')" />
    </ItemGroup>
  </Target>

  <!-- Clean generated files -->
  <PropertyGroup>
    <CleanDependsOn>$(CleanDependsOn);CleanSBResources;</CleanDependsOn>
  </PropertyGroup>
  <ItemDefinitionGroup>
      <SBResourceClean></SBResourceClean>
  </ItemDefinitionGroup>
  <Target
    Name="ComputeCleanSBResources" >
    <!-- Since we're not linking while we're cleaning, there's no easy way to compute the required libraries,
         so for the sake of Clean, we link to them all. -->
    <ItemGroup>
      <SBResourceClean Include ="$(StarboardPrebuiltLibsDir)\*.dll"/>
      <SBResourceClean Include ="$(StarboardLibDirs)\*.dll"/>
    </ItemGroup>
  </Target>

  <Target
    Name="RemoveDirIfEmpty"
    AfterTargets="CleanSBResources" >

    <ItemGroup>
      <RemoveDirIfEmpty Remove="%(RemoveDirIfEmpty.Identity)" Condition="!Exists('%(RemoveDirIfEmpty.Identity)')"/>
    </ItemGroup>

    <ItemGroup Condition="'@(RemoveDirIfEmpty)' != ''">
      <RemoveDirIfEmpty Remove="%(RemoveDirIfEmpty.Identity)" Condition="'$([System.IO.Directory]::GetFiles(%(RemoveDirIfEmpty.Identity)))' != '' Or '$([System.IO.Directory]::GetDirectories(%(RemoveDirIfEmpty.Identity)))' != ''"/>
    </ItemGroup>

    <!-- Only delete directories that are empty, since there could be something useful in them. -->
    <RemoveDir Condition="'@(RemoveDirIfEmpty)' != ''" Directories="@(RemoveDirIfEmpty)" />
  </Target>

  <Target
    Name="CleanSBResources"
    DependsOnTargets="ComputeCleanSBResources;$(SBResourceComputeTargets)" >

    <!-- Delete intermediates -->
    <RemoveDir Directories="@(StoryboardCompile->Metadata('IntermediateFile')->ClearMetadata())" />
    <RemoveDir Directories="@(AssetCatalogCompile->Metadata('IntermediateDir')->ClearMetadata())" />
    <Delete Files="@(XibCompile->Metadata('IntermediateFile')->ClearMetadata())" />
    <Delete Files="@(DataModelCompile->Metadata('IntermediateFile')->ClearMetadata())" />
    <Delete Files="@(DataModelDirCompile->Metadata('IntermediateFile')->ClearMetadata())" />
    <Delete Files="@(SBInfoPlistCopy->Metadata('IntermediateFile')->ClearMetadata())" />

    <ItemGroup>
      <RemoveDirIfEmpty Condition="'$(AppContainerApplication)' != 'true'" Include="@(SBResourceClean->Metadata('OutputFile')->DirectoryName()->Distinct())" />
    </ItemGroup>

    <!-- Delete assets -->
    <Delete Condition="'$(AppContainerApplication)' != 'true'" Files="@(SBResourceClean->Metadata('OutputFile')->ClearMetadata())" />
  </Target>

  <Target
    Name="AfterCleanSBResources" 
    AfterTargets="CleanSBResources" >
  </Target>
</Project>
